#include <bits/stdc++.h>
using namespace std;

class TreeNode{
  public:
  
  int freq;
  char c;
  TreeNode* left;
  TreeNode* right;
 
  TreeNode(int data , char c = '\0')
  {
      this-> freq = data;
      this-> c = c;
      left = NULL;
      right = NULL;
  }
};

void storeCodes(TreeNode* root , string code , vector<string>& v)
{
    if(root == NULL)
    {
        return;
    }
    
    if(root-> left == NULL && root-> right == NULL)
    {
        v.push_back(code);
        return;
    }
    
    storeCodes(root-> left , code+"0" , v);
    storeCodes(root-> right , code+"1" , v);
}

class Solution
{
	public:
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    // Code here
		    vector<string> v;
		    TreeNode* root = NULL;
		    priority_queue<pair<int , TreeNode*> , vector<pair<int , TreeNode*>> , greater<pair<int , TreeNode*>> > pq;
		    for(int i = 0 ; i < N ; i++)
		    {
		        TreeNode* node = new TreeNode(f[i] , S[i]);
		        pair<int , TreeNode*> p(f[i] , node);
		        pq.push(p);
		    }
		    
		    while(pq.size() > 1)
		    {
		        pair<int , TreeNode*> pleft = pq.top();
		        pq.pop();
		        pair<int , TreeNode*> pright = pq.top();
		        pq.pop();
		        
		        int newfreq = pleft.first + pright.first;
		        TreeNode* newnode = new TreeNode(newfreq);
		        newnode-> left = pleft.second;
		        newnode-> right = pright.second;
		        
		        pair<int , TreeNode*> pnew(newfreq , newnode);
		        pq.push(pnew);
		    }
		    
		    root = pq.top().second;
		    string code = "";
            storeCodes(root , code , v);
            return v;
		}
};

int main()
{
    string input;
    cin >> input;
    
    unordered_map<char , int> map;
    for(int i = 0 ; i < input.size() ; i++)
    {
        map[input[i]]++;    
    }
    
    sort(input.begin() , input.end());
    
    string str;
    char prevchar = '\0';
    
    for(int i = 0 ; i < input.size() ; i++)
    {
        if(input[i] != prevchar)
        {
            str.push_back(input[i]);
            prevchar = input[i];
        }
    }
    
    vector<int> f;
    
    // cin >> str;
    // for(int i = 0 ; i < str.size() ; i++)
    // {
    //     int x;
    //     cin >> x;
    //     f.push_back(x);
    // }
    
    for(int i = 0 ; i < str.size() ; i++)
    {
        f.push_back(map[str[i]]);
    }
    
    Solution obj;
    vector<string> ans = obj.huffmanCodes(str , f , str.size());
    
    for(int i = 0 ; i < ans.size() ; i++)
    {
        cout << ans[i] << " ";
    }
}
